name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  Build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.17

    - name: Start MongoDB
      uses: supercharge/mongodb-github-action@1.7.0
      with:
        mongodb-version: 5.0.4
        mongodb-username: fealty
        mongodb-password: fealty
        mongodb-db: fealty

    - name: Build & Test
      run: |
        cd app
        go build -v -o fealty
        go test -v
      env:
        MONGO_URI: mongodb://localhost:27017
        MONGO_USER: fealty
        MONGO_PASS: fealty
        FEALTY_ENV: TEST

  Packer_Prep:
    runs-on: ubuntu-latest
    name: Packer Prep
    
    strategy:
      matrix:
        component: ["app", "db"]
    steps:
    - uses: actions/checkout@v2

    - name: Setup
      uses: hashicorp/packer-github-actions@master
      with:
        command: init
        target: deploy/packer

    - name: Validate Globals
      uses: hashicorp/packer-github-actions@master
      with:
        command: validate
        arguments: -syntax-only
        target: deploy/packer

    - name: Validate Local Components
      uses: hashicorp/packer-github-actions@master
      with:
        command: validate
        arguments: -syntax-only
        target: deploy/packer/${{ matrix.component }}

  Terraform_Prep:
    runs-on: ubuntu-latest
    name: Terraform Prep
    env:
      TF_VAR_LINODE_TOKEN: "${{ secrets.LINODE_TOKEN }}"
      AWS_ACCESS_KEY_ID: "${{ secrets.OBJECT_ACCESS_KEY }}"
      AWS_SECRET_ACCESS_KEY: "${{ secrets.OBJECT_SECRET_KEY }}"

    steps:
    - uses: actions/checkout@v2

    - name: Setup
      uses: hashicorp/setup-terraform@v1

    - name: Setup TFLint
      uses: terraform-linters/setup-tflint@v1
      with:
        tflint_version: v0.33.2
        github_token: ${{ secrets.GITHUB_TOKEN }}
      continue-on-error: true

    - name: Init TFLint
      run: tflint --init
      working-directory: deploy

    - name: Run TFLint
      run: tflint -f compact
      working-directory: deploy

    - name: Run Checkov
      id: checkov
      uses: bridgecrewio/checkov-action@v12.641.0
      with:
        directory: deploy/
        # check: CKV_AWS_1 # optional: run only a specific check_id. can be comma separated list
        skip_check: CKV_LIN_2 # skip authorized_keys check because we're adding it from the users Linode profile
        quiet: false # optional: display only failed checks
        soft_fail: false # optional: do not return an error code if there are failed checks
        framework: terraform # optional: run only on a specific infrastructure {cloudformation,terraform,kubernetes,all}
        output_format: json # optional: the output format, one of: cli, json, junitxml, github_failed_only
        download_external_modules: true # optional: download external terraform modules from public git repositories and terraform registry
        log_level: DEBUG # optional: set log level. Default WARNING
        # config_file: path/this_file
        # baseline: cloudformation/.checkov.baseline # optional: Path to a generated baseline file. Will only report results not in the baseline.
        # container_user: 1000 # optional: Define what UID and / or what GID to run the container under to prevent permission issues

    - name: Init
      id: init
      run: terraform -chdir=deploy init

    - name: Validate
      id: validate
      run: terraform -chdir=deploy validate -no-color

    - name: Plan
      id: plan
      run: terraform -chdir=deploy plan -no-color
      continue-on-error: true

    - uses: actions/github-script@0.9.0
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        tf_actions_working_dir: deploy
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Initialization ‚öôÔ∏è \`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ \`${{ steps.validate.outcome }}\`
          #### Terraform Plan üìñ \`${{ steps.plan.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`

          </details>

          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

          github.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })
